package com.online.flowers;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.stubbing.Answer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;

import com.online.flowers.dto.Customer;
import com.online.flowers.dto.CustomerRegionWiseReport;
import com.online.flowers.dto.Sales;
import com.online.flowers.model.CustomerModel;
import com.online.flowers.model.FlowersModel;
import com.online.flowers.repo.CategoryWiseReportsRepo;
import com.online.flowers.repo.CustomerRepo;
import com.online.flowers.repo.DWMReportRepo;
import com.online.flowers.repo.FlowersRepo;
import com.online.flowers.repo.ReportRepo;
import com.online.flowers.repo.SalesRepo;
import com.online.flowers.service.CustomerService;
import com.online.flowers.service.DtoMapperService;
import com.online.flowers.service.SalesService;

class CustomerRegionWiseReportTest implements CustomerRegionWiseReport {
	int emailCount;
	String city;

	CustomerRegionWiseReportTest(int emailCount, String city) {
		this.emailCount = emailCount;
		this.city = city;
	}

	@Override
	public int getEmailCount() {
		// TODO Auto-generated method stub
		return 1;
	}

	@Override
	public String getCity() {
		// TODO Auto-generated method stub
		return "London";
	}
}

@SpringBootTest
@RunWith(SpringRunner.class)
class FlowersApplicationServiceTests {

	@Autowired
	private CustomerService customerService;

	@MockBean
	private DtoMapperService _mapperService;
	
	@Autowired
	private SalesService _salesService;

	@MockBean
	private CustomerRepo _customerRepo;

	@MockBean
	private FlowersRepo _repo;

	@MockBean
	private SalesRepo _salesRepo;

	@MockBean
	private ReportRepo _reportRepo;

	@MockBean
	private DWMReportRepo _dwmReportRepo;

	@MockBean
	private CategoryWiseReportsRepo _categoryWiseReportsRepo;

	Customer customer;

	CustomerModel customerModel;

	@BeforeEach
	public void setUp() {
		customer = new Customer("1@2", "MR", "Mohit", "Kulkarni", "123, High street, Brentford, London", "London", "UK",
				"$2a$10$KLQUgWpeYzNT8q48c226I.5BKJZ41TZaKkJU/4H.3FWyjSUEAeu0S", "9921918100");

		customerModel = new CustomerModel("1@2", "MR", "Mohit", "Kulkarni", "123, High street, Brentford, London",
				"London", "UK", "$2a$10$KLQUgWpeYzNT8q48c226I.5BKJZ41TZaKkJU/4H.3FWyjSUEAeu0S", "9921918100");


		

	}

	@Test
	public void getAllUsersTest() {
		when(_customerRepo.findAll()).thenReturn(Stream
				.of(this.customerModel,
						new CustomerModel("1@3", "MR", "Mavit", "Kulk", "123, High street, Kolkata", "Kolkata", "India",
								"$2a$10$KLQUgWpeYzNT8q48c226I.5BKJZ41TZaKkJU/4H.3FWyjSUEAeuU8", "8884888288"))
				.collect(Collectors.toList()));
		assertEquals(2, customerService.getAllCustomers().size());
	}

	@Test
	public void getCustomerRegionWiseDataTest() {
		when(_customerRepo.getCustomersGroupByCity())
				.thenReturn(Stream.of(new CustomerRegionWiseReportTest(1, "London")).collect(Collectors.toList()));

		assertEquals(1, customerService.getCustomerRegionWiseData().size());
	}

	@Test
	public void convertToCustomerDtoTest() {
		Optional<CustomerModel> customer = Optional
				.ofNullable(new CustomerModel("1@2", "MR", "Mohit", "Kulkarni", "123, High street, Brentford, London",
						"London", "UK", "$2a$10$KLQUgWpeYzNT8q48c226I.5BKJZ41TZaKkJU/4H.3FWyjSUEAeu0S", "9921918100"));

		Customer customerToCompare = this.customer;

		when(_mapperService.convertToCustomerDto(customer)).thenReturn(customerToCompare);
		assertEquals(customerToCompare, _mapperService.convertToCustomerDto(customer));
	}

	public void recordTransactionTest() throws SQLException {
		FlowersModel flower = new FlowersModel();
		flower.setId(223);
		flower.setCategory("love");
		flower.setDescription("for you");
		flower.setImageId("sprlfhvwojmxcaxaus7r");
		flower.setName("Teddy");
		flower.setImageUrl("http://res.cloudinary.com/dxpstpk9n/image/upload/v1623596524/sprlfhvwojmxcaxaus7r.jpg");
		flower.setPrice("500");

		List<FlowersModel> flowers = new ArrayList<>();
		flowers.add(flower);

		Sales sales = new Sales();
		sales.setCustomerModel(customerModel);
		sales.setFlowersModel(flowers);
		
		try {
			when(_salesService.recordTransaction(sales)).thenReturn(true);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		assertEquals(true, _salesService.recordTransaction(sales));
	}

}
